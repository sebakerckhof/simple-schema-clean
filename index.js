const SimpleSchemaReal = require('simpl-schema').default;
const toTest = require('./test.json');
const {
  recordingState,
  status,
  audioSinkRole,
  audioSourceRole,
  usbCameraSettingType,
  cameraRole,
  moderationPolicy,
  deviceRole,
  roomRole,
  displayRole,
} = require('./constants');

function SimpleSchema(schema) {
  if (Array.isArray(schema)) {
    let initial;
    ([initial, ...schema] = schema);
    return schema.reduce((completeSchema, partial) => completeSchema.extend(partial), initial);
  } else {
    return new SimpleSchemaReal(schema);
  }
}

const hierarchySchema = new SimpleSchema({
  _metadata: {
    type: Object,
  },
  '_metadata.master': {
    type: String,
    optional: true,
    max: 20,
  },
  '_metadata.isMaster': {
    type: Boolean,
    optional: true,
    defaultValue: false,
  },
});

const proxySchema = new SimpleSchema({
  url: {
    type: String,
    defaultValue: '',
    optional: true, //XXX: does not work if remvoed => bug
    max: 2048,
  },
  user: {
    type: String,
    defaultValue: '',
    optional: true,
    max: 255,
  },
  password: {
    type: String,
    defaultValue: '',
    optional: true,
    max: 255,
  },
});

const wallpaperCacheSchema = new SimpleSchema([hierarchySchema, {
  _id: {
    type: String,
    defaultValue: '',
    optional: true,
    max: 20,
  },
  role: {
    type: String,
    optional: true,
  },
}]);

const displayModeSchema = new SimpleSchema({
  width: {
    type: SimpleSchemaReal.Integer,
    autoValue() {
      if (this.isSet) {
        return Math.round(this.value);
      }
    },
  },
  height: {
    type: SimpleSchemaReal.Integer,
    autoValue() {
      if (this.isSet) {
        return Math.round(this.value);
      }
    },
  },
  rate: {
    type: Number
  },
  native: {
    type: Boolean,
    optional: true,
  },
});

const displayBaseSchema = new SimpleSchema({
  id: {
    type: String,
    max: 255,
  },
  port: {
    type: String,
    max: 255,
  },
  x: {
    type: SimpleSchemaReal.Integer,
    optional: true,
    autoValue() {
      if (this.isSet) {
        return Math.round(this.value);
      }
    },
  },
  y: {
    type: SimpleSchemaReal.Integer,
    optional: true,
    autoValue() {
      if (this.isSet) {
        return Math.round(this.value);
      }
    },
  },
  activeMode: {
    type: displayModeSchema,
    optional: true,
  },
});

const displaySchema = new SimpleSchema([
  displayBaseSchema,
  {
    vendor: {
      type: String,
      optional: true,
    },
    model: {
      type: String,
      optional: true,
    },
    productCode: {
      type: SimpleSchemaReal.Integer,
      optional: true,
    },
    serial: {
      type: SimpleSchemaReal.Integer,
      optional: true,
    },
    modes: {
      type: Array,
      autoValue() {
        if (!this.isSet) {
          return [];
        }
      },
      optional: true,
    },
    'modes.$': {
      type: displayModeSchema,
    },
  }]);


  const displayConfigSchema = new SimpleSchema([displayBaseSchema, {
  role: {
    type: String,
    allowedValues: Object.values(displayRole),
    defaultValue: displayRole.IDLE,
    optional: true,
  },
  extends: {
    type: String,
    optional: true,
    max: 255,
  },
  parameters: {
    type: Object,
    blackbox: true,
    optional: true,
    autoValue() {
      if (!this.isSet) {
        return {};
      }
    },
  },
  isTouchScreen: {
    type: Boolean,
    optional: true,
    defaultValue: false,
  },
  title: {
    type: String,
    optional: true,
    max: 255,
  },
  isAutoGeneratedTitle: {
    type: Boolean,
    optional: true,
    defaultValue: false,
  },
}]);

const usbCameraSettingSchema = new SimpleSchema({
  id: {
    type: SimpleSchemaReal.Integer,
  },
  name: {
    type: String,
    max: 500,
  },
  type: {
    type: String,
    allowedValues: Object.values(usbCameraSettingType),
  },
  min: {
    type: SimpleSchemaReal.Integer,
    defaultValue: 0,
  },
  max: {
    type: SimpleSchemaReal.Integer,
    defaultValue: 0,
  },
  default: {
    type: SimpleSchemaReal.Integer,
  },
  current: {
    type: SimpleSchemaReal.Integer,
  },
  step: {
    type: SimpleSchemaReal.Integer,
    defaultValue: 1,
  },
  menu: {
    type: Array,
    optional: true,
  },
  'menu.$': {
    type: String,
    max: 500,
  },
});

const framerateSchema = new SimpleSchema({
  numerator: {
    type: SimpleSchemaReal.Integer,
  },
  denominator: {
    type: SimpleSchemaReal.Integer,
  },
});

const resolutionSchema = new SimpleSchema({
  width: {
    type: SimpleSchemaReal.Integer,
  },
  height: {
    type: SimpleSchemaReal.Integer,
  },
});

const usbCameraResolutionSchema = new SimpleSchema([
  resolutionSchema,
  {
    framerates: {
      type: Array,
      optional: true,
      autoValue() {
        if (!this.isSet) {
          return [];
        }
      },
    },
    'framerates.$': {
      type: framerateSchema,
    },
  },
]);

const formatSchema = new SimpleSchema({
  id: {
    type: SimpleSchemaReal.Integer,
  },
  name: {
    type: String,
    max: 500,
  },
});

const usbCameraFormatSchema = new SimpleSchema([
  formatSchema,
  {
    resolutions: {
      type: Array,
      optional: true,
      autoValue() {
        if (!this.isSet) {
          return [];
        }
      },
    },
    'resolutions.$': {
      type: usbCameraResolutionSchema,
    },
  },
]);

const usbCameraBaseSchema = new SimpleSchema({
  id: {
    type: String,
    max: 500,
  },
  port: {
    type: SimpleSchemaReal.Integer,
    optional: true,
  },
  device: {
    type: String,
    optional: true,
    max: 500,
  },
  serial: {
    type: String,
    optional: true,
    defaultValue: '',
    max: 500,
  },
  vendor: {
    type: String,
    optional: true,
    defaultValue: '',
    max: 500,
  },
  model: {
    type: String,
    optional: true,
    defaultValue: '',
    max: 500,
  },
  activeFormat: {
    type: formatSchema,
    optional: true,
  },
  activeResolution: {
    type: resolutionSchema,
    optional: true,
  },
  activeFramerate: {
    type: framerateSchema,
    optional: true,
  },
});

const usbCameraSchema = new SimpleSchema([usbCameraBaseSchema, {
  settings: {
    type: Array,
    optional: true,
    autoValue() {
      if (!this.isSet) {
        return [];
      }
    },
  },
  'settings.$': {
    type: usbCameraSettingSchema,
  },
  formats: {
    type: Array,
    optional: true,
    autoValue() {
      if (!this.isSet) {
        return [];
      }
    },
  },
  'formats.$': {
    type: usbCameraFormatSchema,
  },
}]);

const usbCameraConfigSchema = new SimpleSchema([usbCameraBaseSchema, {
  title: {
    type: String,
    optional: true,
    max: 500,
  },
  isAutoGeneratedTitle: {
    type: Boolean,
    optional: true,
    defaultValue: false,
  },
  role: {
    type: String,
    optional: true,
    allowedValues: Object.values(cameraRole),
  },
  audioDevice: {
    type: String,
    optional: true,
  },
  stream: {
    type: Boolean,
    optional: true,
    defaultValue: false,
  },
  useLocally: {
    type: Boolean,
    optional: true,
    defaultValue: false,
  },
}]);

const audioPortSchema = new SimpleSchema({
  id: {
    type: String,
    max: 500,
  },
  title: {
    type: String,
    max: 500,
  },
  available: {
    type: SimpleSchemaReal.Integer,
    optional: true,
  },
});

const audioSourceBaseSchema = new SimpleSchema({
  id: {
    type: String,
    max: 500,
  },
  device: {
    type: String,
    optional: true,
    max: 500,
  },
  serial: {
    type: String,
    optional: true,
    max: 500,
  },
  activePort: {
    type: audioPortSchema,
    optional: true,
  },
});

const audioSourceSchema = new SimpleSchema([
  audioSourceBaseSchema,
  {
    ports: {
      type: Array,
      optional: true,
      autoValue() {
        if (!this.isSet) {
          return [];
        }
      },
    },
    'ports.$': {
      type: audioPortSchema,
    },
  },
]);

const audioSourceConfigSchema = new SimpleSchema([audioSourceBaseSchema, {
  title: {
    type: String,
    optional: true,
    max: 500,
  },
  role: {
    type: String,
    allowedValues: Object.values(audioSourceRole),
    optional: true,
    defaultValue: audioSourceRole.IDLE,
  },
}]);

const audioSinkBaseSchema = new SimpleSchema({
  id: {
    type: String,
    max: 500,
  },
  device: {
    type: String,
    optional: true,
    max: 500,
  },
  activePort: {
    type: audioPortSchema,
    optional: true,
  },
});

const audioSinkSchema = new SimpleSchema([
  audioSinkBaseSchema,
  {
    ports: {
      type: Array,
      optional: true,
      autoValue() {
        if (!this.isSet) {
          return [];
        }
      },
    },
    'ports.$': {
      type: audioPortSchema,
    },
  },
]);

const audioSinkConfigSchema = new SimpleSchema([audioSinkBaseSchema, {
  title: {
    type: String,
    optional: true,
    max: 500,
  },
  role: {
    type: String,
    allowedValues: Object.values(audioSinkRole),
    optional: true,
    defaultValue: audioSinkRole.IDLE,
  },
}]);

// BASE
const baseSchema = new SimpleSchema({
  // The title of the device, e.g. Whiteboard Camera
  title: {
    type: String,
    optional: true,
    max: 200,
  },
  // Type of device
  type: {
    type: String,
    max: 255,
  },
  model: {
    type: String,
    optional: true,
    max: 255,
  },
  // Institute ID, needs to be the same as the institute id of the location.
  instituteId: {
    type: String,
    max: 20,
  },
  // The reference to location (ID) this device lives in
  // Unique key of the device location, link towards Locations collection
  locationId: {
    type: String,
    optional: true,
    max: 20,
  },

  // List of document IDS of all ancestor location keys
  locations: {
    type: Array,
    optional: true,
  },
  'locations.$': {
    type: String,
    max: 20,
  },
  // Id of meeting which is controlling this device,
  meetingId: {
    type: String,
    optional: true,
    defaultValue: '',
    max: 20,
  },
});

// TYPES
const configurableDeviceSchema = new SimpleSchema({
  activeConfigurationId: {
    type: String,
    optional: true,
    max: 20,
  },
  configured: {
    type: Boolean,
    defaultValue: false,
  },
});

const roleBasedDeviceSchema = new SimpleSchema({
  role: {
    type: String,
    optional: true,
    max: 255,
  },
  parameters: {
    type: Object,
    blackbox: true,
    optional: true,
    autoValue() {
      if (!this.isSet) {
        return {};
      }
    },
  },
});

const stateBasedDeviceSchema = new SimpleSchema({
  state: {
    type: String,
    optional: true,
    max: 255,
  },
  states: {
    type: Array,
    optional: true,
    autoValue() {
      if (!this.isSet) {
        return [];
      }
    },
  },
  'states.$': {
    type: Object,
  },
});

const baseDeviceState = new SimpleSchema({
  state: {
    type: String,
    optional: true,
    max: 255,
  },
});

const networkManagedDeviceSchema = new SimpleSchema({
  publicIp: {
    type: String,
    optional: true,
    max: 255,
  },
  privateIp: {
    type: String,
    optional: true,
    max: 255,
  },
  // The Hostname of the device, e.g. NRC-100-106wi673
  hostname: {
    type: String,
    optional: true,
    max: 255,
  },
  mac: {
    type: String,
    optional: true,
    autoValue() {
      if (this.isSet) {
        return this.value.toLowerCase();
      }
    },
    max: 255,
  },
  // The dns to connect with (roomname in NRC)
  dns: {
    type: String,
    optional: true,
    regEx: new RegExp('^[a-zA-Z0-9-._]*$'),
    max: 1024,
  },
  proxy: {
    type: new SimpleSchema([hierarchySchema, proxySchema]),
    optional: true,
  },
});

const connectedDeviceSchema = new SimpleSchema({
  status: {
    type: SimpleSchemaReal.Integer,
    optional: true,
    defaultValue: status.UNKOWN,
    allowedValues: Object.values(status),
  },
  statusChangedAt: {
    type: Date,
    optional: true,
  },
});

const managedDeviceSchema = new SimpleSchema({
  // User ID that controls this device
  managingUserId: {
    type: String,
    optional: true,
    max: 20,
  },
  rebootSchedule: {
    type: String,
    optional: true,
    defaultValue: '',
    max: 20,
  },
});

// AUDIO
const audioPropertiesSchema = new SimpleSchema({
  mute: {
    type: Boolean,
    optional: true,
  },
  volume: {
    type: SimpleSchemaReal.Integer,
    min: 0,
    max: 100,
    optional: true,
  },
});

const audioDeviceState = new SimpleSchema([baseDeviceState, {
  audio: {
    type: audioPropertiesSchema,
    autoValue() {
      if (!this.isSet) {
        return {};
      }
    },
  },

}]);

const audioDeviceDynamicConfig = new SimpleSchema({
  audioSinkConfig: {
    type: Array,
    autoValue() {
      if (!this.isSet) {
        return [];
      }
    },
  },
  'audioSinkConfig.$': {
    type: audioSinkConfigSchema,
  },
  audioSourceConfig: {
    type: Array,
    autoValue() {
      if (!this.isSet) {
        return [];
      }
    },
  },
  'audioSourceConfig.$': {
    type: audioSourceConfigSchema,
  },
});

const audioDeviceSchema = new SimpleSchema([
  audioDeviceState,
  audioDeviceDynamicConfig,
  {
    audioSinksLatest: {
      type: Array,
      autoValue() {
        if (!this.isSet) { return []; }
      },
    },
    'audioSinksLatest.$': {
      type: audioSinkSchema,
    },
    audioSinks: {
      type: Array,
      autoValue() {
        if (!this.isSet) { return []; }
      },
    },
    'audioSinks.$': {
      type: audioSinkSchema,
    },
    audioSourcesLatest: {
      type: Array,
      autoValue() {
        if (!this.isSet) { return []; }
      },
    },
    'audioSourcesLatest.$': {
      type: audioSourceSchema,
    },
    audioSources: {
      type: Array,
      autoValue() {
        if (!this.isSet) { return []; }
      },
    },
    'audioSources.$': {
      type: audioSourceSchema,
    },
    audioSinksLocked: {
      type: Boolean,
      optional: true,
      defaultValue: false,
    },
    audioSourcesLocked: {
      type: Boolean,
      optional: true,
      defaultValue: false,
    },
  }]);


const usbCameraDeviceDynamicConfig = new SimpleSchema({
  usbCameraConfig: {
    type: Array,
    autoValue() {
      if (!this.isSet) {
        return [];
      }
    },
  },
  'usbCameraConfig.$': {
    type: usbCameraConfigSchema,
  },
});

const usbCameraDeviceSchema = new SimpleSchema([
  usbCameraDeviceDynamicConfig,
  {
    usbCameras: {
      type: Array,
      autoValue() {
        if (!this.isSet) { return []; }
      },
    },
    'usbCameras.$': {
      type: usbCameraSchema,
    },
    usbCamerasLatest: {
      type: Array,
      autoValue() {
        if (!this.isSet) { return []; }
      },
    },
    'usbCamerasLatest.$': {
      type: usbCameraSchema,
    },
    usbCamerasLocked: {
      type: Boolean,
      optional: true,
      defaultValue: false,
    },

  }]);



  const byodDeviceState = new SimpleSchema([baseDeviceState, {
  byodCompositionId: {
    type: String,
    optional: true,
  },
  byodEnabled: {
    type: Boolean,
    optional: true,
  },
  moderated: {
    type: Boolean,
    optional: true,
  },
  moderationPolicy: {
    type: SimpleSchemaReal.Integer,
    optional: true,
    allowedValues: Object.values(moderationPolicy),
  },
}]);

const byodDeviceSchema = new SimpleSchema([byodDeviceState, {
  byodEnabled: {
    defaultValue: false,
  },
  moderated: {
    defaultValue: true,
  },
  moderationPolicy: {
    defaultValue: moderationPolicy.ALLOW_NONE,
  },
  byodAccessCode: {
    type: SimpleSchemaReal.Integer,
    optional: true,
  },
  dongleAccessCode: {
    type: SimpleSchemaReal.Integer,
    min: 1000,
    max: 9999,
    optional: true,
  },
}]);

const displayDeviceDynamicConfig = new SimpleSchema({
  wallpaper: {
    type: wallpaperCacheSchema,
    optional: true,
  },
  displayConfig: {
    type: Array,
    autoValue() {
      if (!this.isSet) {
        return [];
      }
    },
  },
  'displayConfig.$': {
    type: displayConfigSchema,
  },
});

const displayDeviceState = new SimpleSchema([baseDeviceState, {}]);

const displayDeviceSchema = new SimpleSchema([
  displayDeviceState,
  displayDeviceDynamicConfig,
  {
    displaysLatest: {
      type: Array,
      autoValue() {
        if (!this.isSet) {
          return [];
        }
      },
    },
    'displaysLatest.$': {
      type: displaySchema,
    },
    displays: {
      type: Array,
      autoValue() {
        if (!this.isSet) {
          return [];
        }
      },
    },
    'displays.$': {
      type: displaySchema,
    },
    displaysLocked: {
      type: Boolean,
      optional: true,
      defaultValue: false,
    },
  }]);



  const recordableDeviceState = new SimpleSchema([baseDeviceState, {
  recording: {
    type: SimpleSchemaReal.Integer,
    optional: true,
    allowedValues: Object.values(recordingState),
  },
}]);

const recordableDeviceSchema = new SimpleSchema([recordableDeviceState, {
  recording: {
    defaultValue: recordingState.STOPPED,
  },
  recorder: {
    type: Object,
    optional: true,
  },
  'recorder.enabled': {
    type: Boolean,
  },
  'recorder.ip': {
    type: String,
    defaultValue: '',
    max: 255,
  },
  'recorder.port': {
    type: String,
    defaultValue: '',
    max: 6,
  },
  'recorder.password': {
    type: String,
    defaultValue: '',
    max: 255,
  },
}]);

const displayNodeDeviceState = new SimpleSchema([
  displayDeviceState,
  audioDeviceState,
  byodDeviceState,
  recordableDeviceState,
]);

const displayNodeDeviceSchema = new SimpleSchema([
  baseSchema,
  managedDeviceSchema,
  configurableDeviceSchema,
  roleBasedDeviceSchema,
  networkManagedDeviceSchema,
  connectedDeviceSchema,

  displayNodeDeviceState,
  displayDeviceSchema,
  usbCameraDeviceSchema,
  audioDeviceSchema,

  byodDeviceSchema,

  recordableDeviceSchema,
  {
    role: {
      allowedValues: Object.values(deviceRole),
    },
    version: {
      type: String,
      optional: true,
      defaultValue: '0.0.1',
      max: 50,
    },

    'states.$': {
      type: displayNodeDeviceState,
    },

    lockImports: {
      type: SimpleSchemaReal.Integer,
      optional: true,
      defaultValue: 0,
    },
  },
]);

console.log("start validate");
console.time("validate");
displayNodeDeviceSchema.validate(toTest);
console.timeEnd("validate");
console.log("end validate");
console.log("start clean");
console.time("clean");
displayNodeDeviceSchema.clean(toTest);
console.timeEnd("clean");
console.log("end clean");